#!-------------------------------------------------------------------------------------------------!
#!   CP2K: A general program to perform molecular dynamics simulations                             !
#!   Copyright 2000-2024 CP2K developers group <https://cp2k.org>                                  !
#!                                                                                                 !
#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
#!-------------------------------------------------------------------------------------------------!
#:mute

   #! each list collects the different variable names
   #! element 1: name of quantity to get derivative
   #! element 2: name of spin channel (only used with density gradients)
   #! element 3: name of response quantity variable
   #! element 4: name of variable nameof the contribution to the response potential
   #! elements 5+6: first and last indices of the potential arrays corresponding to the required spin channels

   #:set arguments_openshell = [("rhoa", "a", "rho1a", "v_xc", 1, 1), ("rhob", "b", "rho1b", "v_xc", 2, 2), ("norm_drho", "", "dr1dr", "v_drho", 1, 2), ("norm_drhoa", "a", "dra1dra", "v_drhoa", 1, 1), ("norm_drhob", "b", "drb1drb", "v_drhob", 2, 2), ("tau_a", "a", "tau1a", "v_xc_tau", 1, 1), ("tau_b", "b", "tau1b", "v_xc_tau", 2, 2), ("laplace_rhoa", "a", "laplace1a", "v_laplace", 1, 1), ("laplace_rhob", "b", "laplace1b", "v_laplace", 2, 2)]
   #:set arguments_triplet_outer = [("rhoa", "a", "rho1a", "v_xc", 1, 1), ("norm_drho", "", "dr1dr", "v_drho", 1, 1), ("norm_drhoa", "a", "dra1dra", "v_drhoa", 1, 1), ("tau_a", "a", "tau1a", "v_xc_tau", 1, 1), ("laplace_rhoa", "a", "laplace1a", "v_laplace", 2, 2)]
   #:set arguments_triplet_inner = arguments_triplet_outer + [("rhob", "b", "rho1b", "v_xc", 2, 2), ("norm_drhob", "b", "drb1drb", "v_drhob", 2, 2), ("tau_b", "b", "tau1b", "v_xc_tau", 2, 2), ("laplace_rhob", "b", "laplace1b", "v_laplace", 2, 2)]
   #:set arguments_closedshell = [("rho", "", "rho1", "v_xc", 1, 1), ("norm_drho", "", "dr1dr", "v_drho", 1, 1), ("tau", "", "tau1", "v_xc_tau", 1, 1), ("laplace_rho", "", "laplace1", "v_laplace", 1, 1)]

   #:def add_2nd_derivative_terms(outer_arguments, inner_arguments=[])
      #:set my_inner_arguments = outer_arguments if inner_arguments==[] else inner_arguments
      #:for arg1, appendix1, darg1, v_arg1, start1, end1 in outer_arguments
         #! Code for the second order contributions
         #:for arg2, _, darg2, v_arg2, _, _ in my_inner_arguments
            deriv_att => xc_dset_get_derivative(deriv_set, [deriv_${arg1}$, deriv_${arg2}$])
            IF (ASSOCIATED(deriv_att)) THEN
               CALL xc_derivative_get(deriv_att, deriv_data=deriv_data)
!$OMP       PARALLEL DO PRIVATE(k,j,i) DEFAULT(NONE)&
!$OMP       SHARED(bo,${v_arg1}$,deriv_data,${darg2}$#{if v_arg1 != v_arg2}#,${v_arg2}$#{endif}#,fac) COLLAPSE(3)
               DO k = bo(1, 3), bo(2, 3)
                  DO j = bo(1, 2), bo(2, 2)
                     DO i = bo(1, 1), bo(2, 1)
                        #:for i in range(start1, end1+1)
                           ${v_arg1}$ (${i}$)%array(i, j, k) = ${v_arg1}$ (${i}$)%array(i, j, k) #{if arg1.startswith("norm")}#-#{else}#+#{endif}# &
                           #{if ((outer_arguments!=my_inner_arguments) and (arg2[-1]=="b"))}#fac*#{endif}#deriv_data(i, j, k)*${darg2}$ (i, j, k)
                        #:endfor
                     END DO
                  END DO
               END DO
            END IF
         #:endfor

         #! Extra code of the gradients
         #:if arg1.startswith("norm")
            deriv_att => xc_dset_get_derivative(deriv_set, [deriv_${arg1}$])
            IF (ASSOCIATED(deriv_att)) THEN
               CALL xc_derivative_get(deriv_att, deriv_data=deriv_data)
               CALL xc_derivative_get(deriv_att, deriv_data=e_drho${appendix1}$)

               #:if inner_arguments == []
                  IF (my_compute_virial) THEN
                     CALL virial_drho_drho1(virial_pw, drho${appendix1}$, drho1${appendix1}$, deriv_data, virial_xc)
                  END IF ! my_compute_virial
               #:endif

!$OMP       PARALLEL WORKSHARE DEFAULT(NONE) SHARED(${darg1}$,gradient_cut,${arg1}$,${v_arg1}$,deriv_data)
               #:for i in range(start1, end1+1)
                  ${v_arg1}$ (${i}$)%array(:, :, :) = ${v_arg1}$ (${i}$)%array(:, :, :) + &
                                                    deriv_data(:, :, :)*${darg1}$ (:, :, :)/MAX(gradient_cut, ${arg1}$ (:, :, :))**2
               #:endfor
!$OMP       END PARALLEL WORKSHARE
            END IF
         #:endif

         #! Extra code of the Laplacian of the densities
         #:if arg1.startswith("laplace") and inner_arguments == []
            IF (my_compute_virial) THEN
               deriv_att => xc_dset_get_derivative(deriv_set, [deriv_${arg1}$])
               IF (ASSOCIATED(deriv_att)) THEN
                  CALL xc_derivative_get(deriv_att, deriv_data=deriv_data)

                  virial_pw%array(:, :, :) = -rho1${appendix1}$ (:, :, :)
                  CALL virial_laplace(virial_pw, pw_pool, virial_xc, deriv_data)
               END IF
            END IF ! my_compute_virial
         #:endif
      #:endfor

   #:enddef

#:endmute
